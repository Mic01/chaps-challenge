@startuml

title __TILES's Class Diagram__\n

  namespace nz.ac.vuw.ecs.swen225.gp20.maze {
    namespace tiles {
      class nz.ac.vuw.ecs.swen225.gp20.maze.tiles.Conveyor {
          - animate : Thread
          - drawn : boolean
          + Conveyor()
          + getDirection()
          + getImage()
          + isTraversable()
          + moveEvent()
          + toString()
      }
    }
  }
  

  namespace nz.ac.vuw.ecs.swen225.gp20.maze {
    namespace tiles {
      class nz.ac.vuw.ecs.swen225.gp20.maze.tiles.Exit {
          + getImage()
          + isTraversable()
          + moveEvent()
          + toString()
      }
    }
  }
  

  namespace nz.ac.vuw.ecs.swen225.gp20.maze {
    namespace tiles {
      class nz.ac.vuw.ecs.swen225.gp20.maze.tiles.ExitLock {
          - open : boolean
          - treasuresNeeded : int
          - vertical : boolean
          + ExitLock()
          + getImage()
          + getTreasuresNeeded()
          + isOpen()
          + isTraversable()
          + isVertical()
          + moveEvent()
          + toString()
      }
    }
  }
  

  namespace nz.ac.vuw.ecs.swen225.gp20.maze {
    namespace tiles {
      class nz.ac.vuw.ecs.swen225.gp20.maze.tiles.FreeTile {
          + FreeTile()
          + FreeTile()
          + FreeTile()
          + getActor()
          + getImage()
          + getItem()
          + hasItem()
          + isTraversable()
          + moveEvent()
          + toString()
      }
    }
  }
  

  namespace nz.ac.vuw.ecs.swen225.gp20.maze {
    namespace tiles {
      class nz.ac.vuw.ecs.swen225.gp20.maze.tiles.Ice {
          - animate : Thread
          - drawn : boolean
          + getImage()
          + isTraversable()
          + moveEvent()
          + toString()
      }
    }
  }
  

  namespace nz.ac.vuw.ecs.swen225.gp20.maze {
    namespace tiles {
      class nz.ac.vuw.ecs.swen225.gp20.maze.tiles.InfoTile {
          - info : String
          + InfoTile()
          + getImage()
          + getInfo()
          + isTraversable()
          + moveEvent()
          + toString()
      }
    }
  }
  

  namespace nz.ac.vuw.ecs.swen225.gp20.maze {
    namespace tiles {
      class nz.ac.vuw.ecs.swen225.gp20.maze.tiles.LockedDoor {
          - colour : String
          - open : boolean
          - vertical : boolean
          + LockedDoor()
          + getColour()
          + getImage()
          + isOpen()
          + isTraversable()
          + isVertical()
          + moveEvent()
          + toString()
      }
    }
  }
  

  namespace nz.ac.vuw.ecs.swen225.gp20.maze {
    namespace tiles {
      class nz.ac.vuw.ecs.swen225.gp20.maze.tiles.NullTile {
          {static} - random : Random
          - randomNum : int
          + getImage()
          + isTraversable()
          + moveEvent()
          + toString()
      }
    }
  }
  

  namespace nz.ac.vuw.ecs.swen225.gp20.maze {
    namespace tiles {
      abstract class nz.ac.vuw.ecs.swen225.gp20.maze.tiles.Tile {
          {static} - images : HashMap<String, BufferedImage>
          + Tile()
          + Tile()
          + addActor()
          {abstract} + getImage()
          + hasActor()
          {abstract} + isTraversable()
          {abstract} + moveEvent()
          + removeActor()
          {abstract} + toString()
          # getImageProxy()
      }
    }
  }
  

  namespace nz.ac.vuw.ecs.swen225.gp20.maze {
    namespace tiles {
      class nz.ac.vuw.ecs.swen225.gp20.maze.tiles.Vent {
          - xtarget : int
          - ytarget : int
          + Vent()
          + getImage()
          + getTargetX()
          + getTargetY()
          + isTraversable()
          + moveEvent()
          + toString()
      }
    }
  }
  

  namespace nz.ac.vuw.ecs.swen225.gp20.maze {
    namespace tiles {
      class nz.ac.vuw.ecs.swen225.gp20.maze.tiles.Wall {
          + getImage()
          + isTraversable()
          + moveEvent()
          + toString()
      }
    }
  }
  

  namespace nz.ac.vuw.ecs.swen225.gp20.maze {
    namespace tiles {
      class nz.ac.vuw.ecs.swen225.gp20.maze.tiles.Water {
          + getImage()
          + isTraversable()
          + moveEvent()
          + toString()
      }
    }
  }
  

  nz.ac.vuw.ecs.swen225.gp20.maze.tiles.Conveyor -up-|> nz.ac.vuw.ecs.swen225.gp20.maze.tiles.Tile
  nz.ac.vuw.ecs.swen225.gp20.maze.tiles.Conveyor o-- nz.ac.vuw.ecs.swen225.gp20.maze.actors.Actor.Direction : moveDirection
  nz.ac.vuw.ecs.swen225.gp20.maze.tiles.Exit -up-|> nz.ac.vuw.ecs.swen225.gp20.maze.tiles.Tile
  nz.ac.vuw.ecs.swen225.gp20.maze.tiles.ExitLock -up-|> nz.ac.vuw.ecs.swen225.gp20.maze.tiles.Tile
  nz.ac.vuw.ecs.swen225.gp20.maze.tiles.FreeTile -up-|> nz.ac.vuw.ecs.swen225.gp20.maze.tiles.Tile
  nz.ac.vuw.ecs.swen225.gp20.maze.tiles.FreeTile o-- nz.ac.vuw.ecs.swen225.gp20.maze.items.Item : item
  nz.ac.vuw.ecs.swen225.gp20.maze.tiles.Ice -up-|> nz.ac.vuw.ecs.swen225.gp20.maze.tiles.Tile
  nz.ac.vuw.ecs.swen225.gp20.maze.tiles.InfoTile -up-|> nz.ac.vuw.ecs.swen225.gp20.maze.tiles.Tile
  nz.ac.vuw.ecs.swen225.gp20.maze.tiles.LockedDoor -up-|> nz.ac.vuw.ecs.swen225.gp20.maze.tiles.Tile
  nz.ac.vuw.ecs.swen225.gp20.maze.tiles.NullTile -up-|> nz.ac.vuw.ecs.swen225.gp20.maze.tiles.Tile
  nz.ac.vuw.ecs.swen225.gp20.maze.tiles.Tile o-- nz.ac.vuw.ecs.swen225.gp20.maze.actors.Actor : actor
  nz.ac.vuw.ecs.swen225.gp20.maze.tiles.Vent -up-|> nz.ac.vuw.ecs.swen225.gp20.maze.tiles.Tile
  nz.ac.vuw.ecs.swen225.gp20.maze.tiles.Wall -up-|> nz.ac.vuw.ecs.swen225.gp20.maze.tiles.Tile
  nz.ac.vuw.ecs.swen225.gp20.maze.tiles.Water -up-|> nz.ac.vuw.ecs.swen225.gp20.maze.tiles.Tile


right footer


PlantUML diagram generated by SketchIt! (https://bitbucket.org/pmesmeur/sketch.it)
For more information about this tool, please contact philippe.mesmeur@gmail.com
endfooter

@enduml
